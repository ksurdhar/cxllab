
if(matches.length > 0){
  debugger
  var renderedContent = this.template({ user: this.model, relationships: relationships, matches: matches });
}
else{
  debugger
  var matches = [];
  var renderedContent = this.template({ user: this.model, relationships: relationships, matches: matches });
}


<ul>
  <% matches.each(function(match){ %>
    <li>id: <%= match.get('id') %> email: <%= match.get('email') %></li>
  <% }); %>
</ul>



// list emails 
//where my.relationships.(where liked: true).liked_user_ids = users with those ids if that_model.relationships.include a liked_user_id == global
      
consider a subview

look at matches
matches, genre, swiping, graphs

add a form in account page to set genre

dry out like/dislike code
making matches persist => global collection of relationships?


creating a custom scope (User.all <= all is a scope)
current_user.potential_matches
potential_matches = users with ids that are not included in my liked users


notifications can appear when a user swipes - listening for changes



SET UP FIGARO




